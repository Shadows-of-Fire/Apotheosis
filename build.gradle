buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://maven.parchmentmc.org' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
		classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

archivesBaseName = "${fileName}-${mcVersion}"

java.toolchain.languageVersion = JavaLanguageVersion.of(project.properties.javaVersion)

minecraft {
    mappings channel: 'parchment', version: project.properties.parchmentVersion
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client = {
            properties 'forge.logging.markers': ''
            properties 'forge.logging.console.level': 'debug'
			arg project.mixin.toBoolean() ? "-mixin.config=${modid}.mixins.json" : ""
            workingDirectory project.file('run')
            mods { "${modid}" { source sourceSets.main } }
        }
        server = {
            properties 'forge.logging.markers': ''
            properties 'forge.logging.console.level': 'debug'
			arg project.mixin.toBoolean() ? "-mixin.config=${modid}.mixins.json" : ""
            workingDirectory project.file('run')
            mods { "${modid}" { source sourceSets.main } }
        }
		data = {
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			workingDirectory project.file('run')
			mods { "${modid}" { source sourceSets.main } }
		}
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
	maven { // CurseForge
        url "https://www.cursemaven.com"
    }
	maven { // Curios
	 	url "https://maven.theillusivec4.top/"
	}
	maven { // The One Probe
		url "https://maven.k-4u.nl/"
	}
	maven { // Patchouli
		url "https://maven.blamejared.com"
	}
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"
	if(project.mixin.toBoolean()) annotationProcessor "org.spongepowered:mixin:${mixinVersion}:processor"
	if(project.hasProperty('jeiVersion')) implementation fg.deobf("mezz.jei:jei-${jeiVersion}")
	if(project.hasProperty('jadeFileId')) implementation fg.deobf("curse.maven:jade-324717:${jadeFileId}")
	if(project.hasProperty('curiosVer'))  implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curiosVer}")
	if(project.hasProperty('topVersion')) implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:theoneprobe:${topVersion}") {
		transitive = false
	})
	if(project.hasProperty('patchouliVer')) implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouliVer}")
	implementation fileTree(dir: 'libs', include: '*.jar')
	if(project.hasProperty('mmmFileId')) implementation fg.deobf("curse.maven:mmmmmmmmmmmm-225738:${mmmFileId}")
	if(project.hasProperty('bookshelfVer')) compileOnly fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-${mcVersion}:${bookshelfVer}")
	if(project.hasProperty('gamestagesVer')) compileOnly fg.deobf("net.darkhax.gamestages:GameStages-Forge-${mcVersion}:${gamestagesVer}")
}

mixin {
    if(project.mixin.toBoolean()) add sourceSets.main, "${modid}.refmap.json"
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', "${modid}.mixins.json".toString()]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [modid: modid, 
						 version: version,
						 displayName: spacedName, 
						 author: author, 
						 desc: desc,
						 mcVersion: mcVersion, 
						 forgeVersion: forgeVersion,
						 mixins: mixins,
						 clientMixins: clientMixins
						]

if(project.hasProperty('placeboDep')) replaceProperties.put 'placeboDep', placeboDep
if(project.hasProperty('curiosVer')) replaceProperties.put 'curiosVer', curiosVer
if(project.hasProperty('topVersion')) replaceProperties.put 'topVersion', topVersion
if(project.hasProperty('patchouliVer')) replaceProperties.put 'patchouliVer', patchouliVer

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

jar {
    manifest {
        attributes(["Specification-Title": project.fileName,
                    "Specification-Vendor": project.author,
                    "Specification-Version": "1.0", // We are version 1 of ourselves
                    "Implementation-Title": project.fileName,
                    "Implementation-Version": project.version,
                    "Implementation-Vendor" : project.author,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					"MixinConfigs": project.mixin.toBoolean() ? "${modid}.mixins.json" : ""
					])
    }
}

jar.finalizedBy('reobfJar')